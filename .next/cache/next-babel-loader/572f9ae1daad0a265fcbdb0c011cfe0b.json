{"ast":null,"code":"var _jsxFileName = \"/Users/niklas/dev/doku/pages/_app.tsx\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport \"../styles/index.scss\";\nimport \"prismjs/themes/prism-tomorrow.css\";\nimport React from \"react\";\nexport const useIntersect = ({\n  root = null,\n  rootMargin,\n  threshold = 0\n}) => {\n  const [entry, updateEntry] = React.useState({});\n  const [node, setNode] = React.useState(null);\n  const observer = React.useRef(null);\n  React.useEffect(() => {\n    if (observer.current) observer.current.disconnect();\n    observer.current = new window.IntersectionObserver(([entry]) => updateEntry(entry), {\n      root,\n      rootMargin,\n      threshold\n    });\n    const {\n      current: currentObserver\n    } = observer;\n    if (node) currentObserver.observe(node);\n    return () => currentObserver.disconnect();\n  }, [node, root, rootMargin, threshold]);\n  return [setNode, entry];\n};\nexport default function App({\n  Component,\n  pageProps\n}) {\n  return __jsx(Component, _extends({}, pageProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }));\n}\nlet animationSelectors = ['#ID-to-animate', '.class-to-animate'];\n\nconst animChecker = target => {\n  // Loop over our selectors\n  animationSelectors.forEach(selector => {\n    // Loop over all matching DOM elements for that selector\n    target.querySelectorAll(selector).forEach(element => {\n      const elementTop = element.getBoundingClientRect().top;\n\n      if (elementTop < bodyHeight) {\n        element.classList.add('scrolled-to');\n      }\n    });\n  });\n};","map":{"version":3,"sources":["/Users/niklas/dev/doku/pages/_app.tsx"],"names":["React","useIntersect","root","rootMargin","threshold","entry","updateEntry","useState","node","setNode","observer","useRef","useEffect","current","disconnect","window","IntersectionObserver","currentObserver","observe","App","Component","pageProps","animationSelectors","animChecker","target","forEach","selector","querySelectorAll","element","elementTop","getBoundingClientRect","top","bodyHeight","classList","add"],"mappings":";;;;;AAAA,OAAO,sBAAP;AACA,OAAO,mCAAP;AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,IAAI,GAAG,IAAT;AAAeC,EAAAA,UAAf;AAA2BC,EAAAA,SAAS,GAAG;AAAvC,CAAD,KAA+C;AACzE,QAAM,CAACC,KAAD,EAAQC,WAAR,IAAuBN,KAAK,CAACO,QAAN,CAAe,EAAf,CAA7B;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBT,KAAK,CAACO,QAAN,CAAe,IAAf,CAAxB;AAEA,QAAMG,QAAQ,GAAGV,KAAK,CAACW,MAAN,CAAa,IAAb,CAAjB;AAEAX,EAAAA,KAAK,CAACY,SAAN,CACE,MAAM;AACJ,QAAIF,QAAQ,CAACG,OAAb,EAAsBH,QAAQ,CAACG,OAAT,CAAiBC,UAAjB;AAEtBJ,IAAAA,QAAQ,CAACG,OAAT,GAAmB,IAAIE,MAAM,CAACC,oBAAX,CACjB,CAAC,CAACX,KAAD,CAAD,KAAaC,WAAW,CAACD,KAAD,CADP,EAEjB;AACEH,MAAAA,IADF;AAEEC,MAAAA,UAFF;AAGEC,MAAAA;AAHF,KAFiB,CAAnB;AASA,UAAM;AAAES,MAAAA,OAAO,EAAEI;AAAX,QAA8BP,QAApC;AAEA,QAAIF,IAAJ,EAAUS,eAAe,CAACC,OAAhB,CAAwBV,IAAxB;AAEV,WAAO,MAAMS,eAAe,CAACH,UAAhB,EAAb;AACD,GAlBH,EAmBE,CAACN,IAAD,EAAON,IAAP,EAAaC,UAAb,EAAyBC,SAAzB,CAnBF;AAsBA,SAAO,CAACK,OAAD,EAAUJ,KAAV,CAAP;AACD,CA7BM;AA+BP,eAAe,SAASc,GAAT,CAAa;AAAEC,EAAAA,SAAF;AAAaC,EAAAA;AAAb,CAAb,EAAuC;AAEpD,SACE,MAAC,SAAD,eAAeA,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAGD;AAED,IAAIC,kBAAkB,GAAG,CAAC,gBAAD,EAAmB,mBAAnB,CAAzB;;AAEA,MAAMC,WAAW,GAAIC,MAAD,IAAY;AAC5B;AACAF,EAAAA,kBAAkB,CAACG,OAAnB,CAA2BC,QAAQ,IAAI;AACnC;AACAF,IAAAA,MAAM,CAACG,gBAAP,CAAwBD,QAAxB,EAAkCD,OAAlC,CAA0CG,OAAO,IAAI;AACjD,YAAMC,UAAU,GAAGD,OAAO,CAACE,qBAAR,GAAgCC,GAAnD;;AACA,UAAIF,UAAU,GAAGG,UAAjB,EAA6B;AACxBJ,QAAAA,OAAO,CAACK,SAAR,CAAkBC,GAAlB,CAAsB,aAAtB;AACJ;AACJ,KALD;AAMH,GARD;AASH,CAXD","sourcesContent":["import \"../styles/index.scss\";\nimport \"prismjs/themes/prism-tomorrow.css\";\nimport React from \"react\";\n\nexport const useIntersect = ({ root = null, rootMargin, threshold = 0}) => {\n  const [entry, updateEntry] = React.useState({});\n  const [node, setNode] = React.useState(null);\n\n  const observer = React.useRef(null);\n\n  React.useEffect(\n    () => {\n      if (observer.current) observer.current.disconnect();\n\n      observer.current = new window.IntersectionObserver(\n        ([entry]) => updateEntry(entry),\n        {\n          root,\n          rootMargin,\n          threshold\n        }\n      );\n\n      const { current: currentObserver} = observer;\n\n      if (node) currentObserver.observe(node);\n\n      return () => currentObserver.disconnect();\n    },\n    [node, root, rootMargin, threshold]\n  );\n\n  return [setNode, entry];\n};\n\nexport default function App({ Component, pageProps }) {\n\n  return (\n    <Component {...pageProps} />\n  );\n}\n\nlet animationSelectors = ['#ID-to-animate', '.class-to-animate']\n\nconst animChecker = (target) => {\n    // Loop over our selectors\n    animationSelectors.forEach(selector => {\n        // Loop over all matching DOM elements for that selector\n        target.querySelectorAll(selector).forEach(element => {\n            const elementTop = element.getBoundingClientRect().top\n            if (elementTop < bodyHeight) {\n                 element.classList.add('scrolled-to')\n            }\n        })\n    })\n}"]},"metadata":{},"sourceType":"module"}